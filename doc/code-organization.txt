Functionalities of Vespa
========================
1. Create: Read a request for a virtual cluster, apply parameters from the request and Vespa defaults, in order to transform an XML template into VM definitions for libvirt. Finally, launch the VM instances on the physical cluster.

2. Submit: Read a request for application execution(s), apply parameters from the request, Vespa defaults 
and application definition, in order to to transform a PBS template into a Torque submission file. Finally, submit the file to a Torque virtual cluster while gathering performance metrics.

3. Run Experiments: Process an XML with a list of independent Scenarios, each Scenario has one or more concurrent Experiments (currently no concurrency). For each Experiment, apply the Create and Submit functionalities for the cluster and application requests contained therein and generate performance metrics related to a cluster request.

4. Consolidate: Gather performance and execution metrics from a set of Experiments and consolidate the data into a single folder. Produces two CSV files containing scalar metrics vs experiment configuration, and a directory with metrics from system performance.

Directories of Vespa
====================

apps: 
	stores application-specific configuration and plugins to extract customized performance metrics.
bin: 
	Vespa executables
config:
	main configuration files for Vespa
data-input:
	files used for Vespa setup
data-output:
	files generated by Vespa during setup and performing functionalities 
doc:
	Vespa documentation
input:
	files used for Vespa setup
install:
	code for Vespa installation, stores default configuration files (TODO)
mgmt:
	scripts for managing the life-cycle of VMs
mgmt-nodes:
	scripts for managing the physical nodes used by Vespa
monitor:
	scripts for performance monitoring
networking:
	scripts for setup of Vespa networking
output:
	files generated by Vespa during setup and usage
setup:
	scripts used for Vespa setup
templates:
	template files used by Vespa when performing functionalities 
tests:
	scripts and code to test Vespa Python code
util:
	scripts for Vespa setup and performing functionalities based on shell
vespa:
	Vespa Python code

Vespa Python packages (vespa directory)
=========================================

__main__.py
	Executes the 'Run experiments' functionality.
bootstrap.py
	Orchestrates all necessary initilization for performing Vespa functionalitites

core:
	Important Vespa modules used by multiple functionalities

	cluster.py
		Contains entity classes that describe virtual clusters.
	config_app.py
		Manages data about applications registered with Vespa.
	config_hw.py
		Reads hardware specification from configuration file.
	config_vespa.py
		Reads key Vespa parameters from configuration file.
	enum.py
		Contains enumeration classes.
	experiment.py
		Contains entity classes that describe experiments and applications.
	inventory_all.py
		Creates Ansible inventory containing all Vespa nodes and all possible VMs.
	inventory_node.py
		Creates Ansible inventories containing physical nodes.
	inventory_vm.py
		Creates Ansible inventories containing VMs.
	physical.py
		Contains entity classes that describe the physical nodes.
	shellparams.py
		Converts Vespa parameters to a source file for shell scripts.
	simple_rules.py
		Rules for defining cluster placements using the simple characterization.
	simple_specs.py
		Validates feasibility of cluster placements using the simple characterization.
	uuid.py
		Creates a UUID on demand.
	virtual.py
		Contains entity classes that describe VMs.

create:
	Package for the create functionality of Vespa

	__main__.py
		Executes the create functionality
	cluster.py
		Creates an XML specification common to al VMs of a virtual cluster request.
	mapping.py
		Calculates the physical deployment for a virtual cluster request.
	parser.py
		Reads the scenarios in an XML file for the 'Run experiments' functionality.
	pinning.py
		Adds the virtual CPU pinnings to an XML specification for a VM based on cluster request
	runner.py
		Iterates experiments for the 'Run experiments' functionality, also deploys a virtual cluster using libvirt.
	vm.py
		Creates the XML specifications for the VMs based on a virtual cluster request.

submit:
	Package for the submit functionality of Vespa

	__main__.py
		Uses Vespa to submit an application on a previously deployed cluster.
	apprunner.py
		Runs an application on an existing virtual cluster
	config.py
		Configures application environment for execution (Torque submission file)
	execute.py
		Orchestrates the application configuration and execution.
	prepare.py
		Prepares Vespa environment for application execution, generates secondary outputs.
	pbs/updater.py
		Updates the Torque cluster manager with configuration for a virtual cluster topology.

consolidate:
	Package for the consolidate functionality of Vespa

	__main__.py
		Orchestrates the consolidation of experiment results.
	analyzer.py
		Aggregates results for the same configuration, stores file in the configuration directory.
	configlist.py
		Creates the consolidation file that describes all configurations.
	configtree.py
		Creates the output tree to store the consolidated system performance metrics.
	configutil.py
		Contains procedures for the consolidation functionality.
	metricsgen.py
		Creates the consolidation file that contains the scalar metrics for each configuration.
	nodenames.py
		Procedure to create a file containing node names
	plugin.py
		Loads a user-defined module that processes application-specific output.
	sargen.py
		Deals with the system performance metrics (SAR), calls sargen-metrics.R for each configuration
	sargen-metrics.R
		Generates consolidated metrics for system performance of an experiment configuration.

network:
	Package that manages networking aspects of Vespa, such as defining virtual networks.

	address.py
		Routines for newtork addresses
	create.py
		Creates the network XMLs for different implementations.
	etchosts.py
		Creates the /etc/hosts file based on Vespa configuration.
	ips.py
		Adds network data to physical and virtual entities.
