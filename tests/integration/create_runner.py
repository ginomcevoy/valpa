'''
Created on Oct 16, 2013

@author: giacomo
'''
import unittest
from create.runner import ClusterExecutor
from create.cluster import ClusterDefiner, ClusterXMLGenerator
from unit.test_abstract import VespaDeploymentAbstractTest
from create.pinning import BuildsPinningWriter
from network.address import NetworkAddresses
from create.vm import BuildsVMDefinitionGenerator
import bootstrap
from create.mapping import MappingResolver

class ExperimentSetRunnerPartialIntegrationTest(unittest.TestCase):
    '''
    Full integration test for ExperimentSetRunner, using forReal=False
    (only checks for cluster definition in each experiment) 
    '''
    
    def setUp(self):
        # Vespa configuration files
        self.vespaFilename = 'resources/vespa.params'
        self.hardwareFilename = 'resources/hardware.params'
        self.masterXML = 'resources/master.xml'
        
        # expected
        self.expectedOutput1 = {'kvm-pbs082-01' : '/tmp/vespa/xmls/exp1/kvm-pbs082-01.xml',
                               'kvm-pbs082-02' : '/tmp/vespa/xmls/exp1/kvm-pbs082-02.xml',
                               'kvm-pbs083-01' : '/tmp/vespa/xmls/exp1/kvm-pbs083-01.xml',
                               'kvm-pbs083-02' : '/tmp/vespa/xmls/exp1/kvm-pbs083-02.xml'}
        self.expectedXMLs1 = (open('resources/integration/kvm-pbs082-01-expected.xml').read(),
                             open('resources/integration/kvm-pbs082-02-expected.xml').read(),
                             open('resources/integration/kvm-pbs083-01-expected.xml').read(),
                             open('resources/integration/kvm-pbs083-02-expected.xml').read())
        
        self.expectedOutput2 = {'kvm-pbs082-01' : '/tmp/vespa/xmls/exp2/kvm-pbs082-01.xml'}
        self.expectedXML2 = open('resources/integration/kvm-pbs082-01-second.xml').read()
    
    def testRunAll(self):
        # Bootstrap Vespa
        bootstrap.doBootstrap(False) # forReal is false
        bootstrapper = bootstrap.getInstance()
     
        expSetRunner = bootstrapper.getExperimentSetRunner()
        experimentXML = 'resources/integration/two-exps.xml'
        
        # when
        print(experimentXML)
        expSetRunner.readAndExecute(experimentXML)
        
class ClusterDefinerIntegrationTest(VespaDeploymentAbstractTest):
    '''
    Full integration test for ClusterDefiner.
    '''

    def setUp(self):
        VespaDeploymentAbstractTest.setUp(self)
        
        # vespa XML, as generated by VespaConfig.produceVespaXML
        self.vespaXML = open('resources/vespa-expected.xml', 'r').read()
        self.experimentName = 'testExp'
        
        # instantiate
        mappingResolver = MappingResolver(self.hwSpecs, self.vespaPrefs, self.physicalCluster, self.allVMDetails)
        clusterXMLGen = ClusterXMLGenerator(self.vespaXML, self.vespaPrefs)
        
        pinningBuilder = BuildsPinningWriter(self.hwSpecs, self.vespaPrefs)
        networkAddresses = NetworkAddresses(self.networkingOpts, self.physicalCluster, self.hwSpecs)
        buildsVmRequestGenerator = BuildsVMDefinitionGenerator(self.vespaPrefs, pinningBuilder.build(), networkAddresses)
        vmDefinitionGenerator = buildsVmRequestGenerator.build()
        
        self.clusterDefiner = ClusterDefiner(mappingResolver, clusterXMLGen, vmDefinitionGenerator)
        
        # expected
        self.expectedOutput = {'kvm-pbs082-01' : '/tmp/vespa/xmls/testExp/kvm-pbs082-01.xml',
                               'kvm-pbs082-02' : '/tmp/vespa/xmls/testExp/kvm-pbs082-02.xml',
                               'kvm-pbs083-01' : '/tmp/vespa/xmls/testExp/kvm-pbs083-01.xml',
                               'kvm-pbs083-02' : '/tmp/vespa/xmls/testExp/kvm-pbs083-02.xml'}
        
        self.expectedXMLs = ('resources/integration/kvm-pbs082-01-expected.xml',
                             'resources/integration/kvm-pbs082-02-expected.xml',
                             'resources/integration/kvm-pbs083-01-expected.xml',
                             'resources/integration/kvm-pbs083-02-expected.xml')
        
    def testGeneration(self):
        # call under unit
        (deployedNodes, deployedSockets, deployedVMs) = self.clusterDefiner.defineCluster(self.clusterRequest, self.experimentName, False)  # @UnusedVariable
        
        # verify
        for i, vm in enumerate(deployedVMs):
            self.assertFileContentEqual(vm.getDefinition(), self.expectedXMLs[i])
        
class ClusterExecutorTest(VespaDeploymentAbstractTest):
    
    def setUp(self):
        VespaDeploymentAbstractTest.setUp(self)
        self.executor = ClusterExecutor(False, self.vespaPrefs, self.runOpts)
    
    def testPrepareAndExecute(self):
        (execConfig, executionFile) = self.executor.prepareAndExecute(self.clusterRequest, self.deploymentInfo, self.appRequest)
        
        self.assertFileContentEqual(execConfig, 'resources/execConfig-expected.output')
        self.assertFileContentEqual(executionFile, 'resources/torque/pbs-exec-expected.pbs')
    
if __name__ == "__main__":
    # import sys;sys.argv = ['', 'Test.testName']
    unittest.main()
