#!/bin/bash
#
# Giacomo Mc Evoy - giacomo@lncc.br
# LNCC Brazil 2013
# Adapted from job.PARPARBench
# christian.simmendinger@t-systems.com
#
#PBS -l walltime=CF_TIME
#PBS -l nodes=CF_NODE:ppn=CF_PPN 
#-l ncpus=CF_TCPU
#PBS -N CF_BENCH
#PBS -t 1-EXEC_TIMES
#PBS -o APP_OUTPUT_DIR/pbs.out
#PBS -e APP_OUTPUT_DIR/pbs.err

# Var PBS_NODEFILE contains the node names (repeated)

# Execution parameters 
config=RUN_CONFIG 	# Execution configuration
rnum=$PBS_ARRAYID	# Iteration of experiment

# Deployment parameters
np=CF_TCPU

# Application parameters
name=APP_EXEC_NAME

echo "Running PBS application: APP_EXECUTABLE"
echo "Using config file: $config"
echo "Execution number: $rnum"

# Copy config and node files
EXEC_CONFIG=/tmp/pbs-$name-config.txt
EXEC_CONFIG_BKP=/tmp/pbs-$name-config.bkp
EXEC_PROCS=/tmp/pbs-$name-procs.txt
scp kvm-head:$config $EXEC_CONFIG
cp $EXEC_CONFIG $EXEC_CONFIG_BKP

# Sort (don't copy) file with node names, to ensure uniqueness
sort $PBS_NODEFILE > $EXEC_PROCS

#
# Generate MD5 for config+procs+application executable
#

# Trim config to only include critical data (let equivalent execs group together)
sed -i -e '/EXECUTION=/d' -e '/PBS_FILE=/d' -e '/EXEC_TIME/d' \
       -e '/STOP/d' -e '/VERBOSE/d' -e '/TIME_OUTPU/d' -e '/TIME_FORMA/d' $EXEC_CONFIG
# MD5 for application executable 
APP_FILE=APP_HOME/APP_EXECUTABLE
APP_MD5=$(md5sum $APP_FILE | cut -f1 -d ' ')
# Generate MD5 hash
EXEC_MD5_FILE=/tmp/pbs-$name-md5
cp $EXEC_CONFIG $EXEC_MD5_FILE
cat $EXEC_PROCS >> $EXEC_MD5_FILE
echo $APP_MD5 >> $EXEC_MD5_FILE
EXEC_MD5=$(md5sum $EXEC_MD5_FILE | cut -f1 -d ' ')

#
# Output dirs/filenames 
#
rnum=$(printf "%03d\n" $rnum)
EXEC_OUTPUT_DIR=APP_OUTPUT_DIR/$EXEC_MD5/${name}-${rnum}
STDOUT=std.out
STDERR=std.err
CUSTOM=custom.out

# Prepare execution
export PATH=$PATH:/usr/local/bin
mkdir -p $EXEC_OUTPUT_DIR
cd APP_HOME

# Start monitoring
#MONITOR_START $PBS_NODEFILE &MONITOR_APP

# The actual invocation of the application
#/usr/bin/time -f 'TIME_FORMAT' -a -o $EXEC_OUTPUT_DIR/../TIME_OUTPUT mpirun APP_EXECUTABLE APP_ARGS > $EXEC_OUTPUT_DIR/$STDOUT 2> $EXEC_OUTPUT_DIR/$STDERR
collect -M OMPT mpirun -- APP_EXECUTABLE APP_ARGS > $EXEC_OUTPUT_DIR/$STDOUT 2> $EXEC_OUTPUT_DIR/$STDERR

# Stop monitoring (all VMs called at once)
#MONITOR_STOP $PBS_NODEFILE $EXEC_OUTPUT_DIR &MONITOR_APP

# Wait for monitoring to stop nicely
sleep 15

# Post-processing of output may be necessary
if [ 'APP_NEEDS_OUTPUT_COPY' == 'Y' ]; then
	cp APP_OTHER_OUTPUT $EXEC_OUTPUT_DIR/$CUSTOM
fi

# Gather info about execution
cp $EXEC_CONFIG_BKP $EXEC_OUTPUT_DIR/../config.txt
cp $EXEC_PROCS $EXEC_OUTPUT_DIR/../pbsprocs.txt
cp $EXEC_MD5_FILE $EXEC_OUTPUT_DIR/../md5.txt

# Add execution info into time output
#echo $config >> TIME_OUTPUT

# Pre-process the monitor files, to save space
&MONITOR_PREPROCESS $EXEC_OUTPUT_DIR /tmp/pbs-nodefile.txt &MONITOR_APP
